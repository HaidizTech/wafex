@symbolsenv
		%web application constants
		header_cookie : text;
		username : text;
		password : text;
		listselect : text;
		htpwd : text;
		cookie : text;
		avatar: text;
		profile : text;

		% messages tagss
		tag1,tag2,tag3,tag4 : text;


@webapp
symbols
			Option,View,Ordering,Typeid: text;
			Username, Password, Cookie, File, RemoteShell, Path: message;
			IP: agent;
			SQLquery, SQLresponse, Search: message;
			NonceWA,NonceDB,NonceFS : text;

		body{


		while(true){
			select{

				% implementing fileUpload functionality
				on( ? *->* Actor : ?IP.http_request(avatar.?File.cookie.?Cookie).tag3):{
						select{
								on((cookieUsed(Cookie))):{
						%assert bau: false;
										NonceWA := fresh();
										Actor *->* Filesystem : writeFile(File).NonceWA;
										Actor *->* IP : profile;
						}}

				}



			% form based authentication
			on( ? *->* Actor: ?IP.http_request(u.?Username.p.?Password).tag1 ): {
							% arity problem, we are missing the password check which should be hashed
							SQLquery := Username;

							NonceWA := fresh();
							%Actor *->* Database : query(SQLquery).NonceWA;
							Actor *->* Database : query(sanitized(SQLquery)).NonceWA;

							select{
									%on(Database *->* Actor : tuple(?SQLresponse).?NonceDB):{
									on(Database *->* Actor : no_tuple.?NonceDB):{
										select{
											on(!nonceUsed(NonceDB)):{
												nonceUsed(NonceDB);
												Cookie := fresh();
												cookieUsed(Cookie);
												Actor *->* IP : http_response(dashboard.tuple(SQLresponse).Cookie);
										}}
									}
							}
				} 


				% this branch represents an uploaded server-side code that
				% reads from the filesystem
				on( ? *->* Actor : ?IP.http_request(file.?Path).tag2 ):{
					select{on( isInFS(evil_file) & evil_file != Path):{ % means the file RemoteShell has been injected and the file I'm trying to
						 % retrieve is not the same as the injected file
						NonceWA := fresh();
						Actor *->* Filesystem : readFile(Path).NonceWA;
						
						Filesystem *->* Actor : f_file(Path).?NonceFS;
							select{on(!nonceUsed(NonceFS)):{
								nonceUsed(NonceFS);
									Actor *->* IP : f_file(Path);
							}}

					}}
				}

			}%end select
		}%end while
		}%end body
		

@goals
		%[](!(iknows(dashboard))); 																							%data extraction + authentication bypass
		[](!(iknows(f_file(?)))); 																							%data extraction + authentication bypass

		%[](!(iknows(f_file(secureFile)))); 																							%data extraction + authentication bypass
		%[](!(iknows(f_file(?)))); 																									% filesystem access
		%[](!(isInFS(evil_file))); 																									% filesystem access

@bodyenv
		%isInFS(secureFile);
		isInFS(htpwd);
