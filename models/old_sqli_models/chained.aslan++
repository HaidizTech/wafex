specification chained
channel_model CCM

entity Environment {
 
	symbols
		webapplication, database, filesystem: agent;

entity Session(Webapplication, Database, Filesystem: agent) {

import Bi;

symbols
		%web application constants
		header_cookie : text;
		username : text;
		password : text;
		listselect : text;
		u,p,bob,file : text;
		tag1,tag2,tag3,tag4 : text;

		noninvertible hash(message) : message;

	entity Webapplication(Actor, Database, Filesystem: agent) {
		symbols
			Option,View,Ordering,Typeid: text;
			Username, Password, Cookie, File, RemoteShell, Path: message;
			IP: agent;
			SQLquery, SQLresponse, Search: message;
			NonceWA,NonceDB,NonceFS : text;

		body{


		while(true){
			select{

				% implementing fileUpload functionality

			%	on( ? *->* Actor : ?IP.http_request(upload.?File)):{
			%		NonceWA := fresh();
			%		Actor *->* Filesystem : writeFile(evil_file).NonceWA;

			%	}
				

			%																					key.value.key.value
			%% 		on( ? *->* Actor: ?IP.http_request(q.?Value.c.history)): {
			%% 		%@ https://157.27.244.25/chained/chained/index.php
			%% 		%@ POST
			%% 		%@ q -> query=?
			%% 		%@ c -> component=history
			%% 		%@ M_s -> articles.title

			% ------------------------------------------------------------------
			%			For performing a general request we need:
			%				- URL => https://157.27.244.25/chained/chained/index.php
			%				- method => POST
			%				- abstract_param_to_real => {q:query, ...}
			%				- params => {query:? , component:history}
			%				- table_mapping => {query:articles.history}
			%
			% ------------------------------------------------------------------
 
			on( ? *->* Actor: ?IP.http_request(u.?Search).tag1 ): {

							% arity problem
							SQLquery := Search;

							NonceWA := fresh();
							Actor *->* Database : query(SQLquery).NonceWA;

							select{
									on(Database *->* Actor : tuple(?SQLresponse).?NonceDB):{
										select{
											on( !nonceUsed(NonceDB)):{
												nonceUsed(NonceDB);
												Actor *->* IP : http_response(viewHistory.tuple(SQLresponse));
										}}
									}
							}
				} 

				% this branch represents an uploaded server-side code that
				% reads from the filesystem
				on( ? *->* Actor : ?IP.http_request(evil_file.file.?Path).tag2 ):{
					select{on( isInFS(evil_file) & evil_file != Path):{ % means the file RemoteShell has been injected and the file I'm trying to
																																 % retrieve is not the same as the injected file
						NonceWA := fresh();
						Actor *->* Filesystem : readFile(Path).NonceWA;
						
						Filesystem *->* Actor : f_file(Path).?NonceFS;
							select{on(!nonceUsed(NonceFS)):{
								nonceUsed(NonceFS);
									Actor *->* IP : f_file(Path);
							}}

					}}
				}


				on( ? *->* Actor: ?IP.http_request(p.?Password).tag3 ):{

						NonceWA := fresh();
						Actor *->* Database : sanitizedQuery(Password).NonceWA;

						
						select{
							on(Database *->* Actor : no_tuple.?NonceDB):{
							select{
								on(!nonceUsed(NonceDB)):{
								nonceUsed(NonceDB);
								Actor *->* IP: http_response(dashboard); % add a value that check if an http_response is valid?
								IP *->* Actor : i.http_request(u.bob).tag4;
								%@ https://157.27.244.25/chained/chained/profile.php
								%@ POST
								%@ u -> user=bob
								
								Actor *->* IP: http_response(adminPanel); % add a value that check if an http_response is valid?
							}
							}}
						}}

			}%end select
		}%end while
		}%end body
		
	}

	body{ %of session
		new Webapplication(webapplication, database, filesystem);  
		new Database(webapplication, database, filesystem);
		new Filesystem(webapplication,database,filesystem);
	}

	goals %of session 
		authorization:
			[](!(iknows(adminPanel))); 																							%data extraction + authentication bypass
			%[](!(iknows(secureFile))); 																							%data extraction + authentication bypass
			%[](!(iknows(f_file(?)))); 																									% filesystem access
			%[](!(isInFS(evil_file))); 																									% filesystem access
			%[]( forall M1. exists M2.!iknows(M1) & M1 = tuple(M2) &  M2 != f_file(?)); % database access
			%[](( forall M1. ( iknows(tuple(M1)) => M1 = f_file(?)))); 									% database access

			%[](( forall M1. M1 != f_file(?) => !(iknows(tuple(M1)) ))); 								% database access
			%[](!( forall M1 M2. (iknows(M1) & M1 = tuple(M2)) => M2 = f_file(?) ) ); 	% database access
}

body{ %of Environment
	new Session(webapplication, database, filesystem);
}

}
