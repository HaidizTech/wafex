specification joomla
channel_model CCM

entity Environment {

	symbols
		sqli: text; 			%sql injection payload
		path_injection: text; 		%valid file
		xss: text; 		% XSS payload
		evil_file: text; 		%valid file
		honest, webapplication, database,filesystem: agent;
		nonpublic dashboard: text;
		nonpublic adminPanel: text;	
		nonpublic loginPage: text;	
		nonpublic errorPage: text;
		nonpublic viewHistory: text;
		nonpublic secureFile: text;
		nonpublic hknows : message set;
		option: text;
		view: text;
		upload, file,u,l,p, bob : text;
		s : text;
		nonpublic ack: text;
		nonpublic sanitized(message) : text;
		redirect(message) : fact;

		%databses
		errorsql: text; %any possible SQLi payload that generates an informative error

		%DBMS
		nonpublic inDB(message): fact;
		nonpublic error(message): fact;
		nonpublic sanitizedQuery(text): text;
		nonpublic query(message): text;
		nonpublic query2(message): text;
		nonpublic insert(message set,message) : text;

		%Filesystem
		nonpublic readFile(message): text;
		nonpublic file(message): message;
		nonpublic newFile(message): message;
		nonpublic inFS(message): fact;
		nonpublic inFS_DB(message): fact;
		nonpublic isInFS(message): fact;
		nonpublic writeFile(message): message;
		nonpublic no_file : message;

		%info about the result of a SQL query
		nonpublic tuple(message): text;
		nonpublic no_tuple: text; 


		nonceUsed(text) : fact;
		cookieUsed(message) : fact;

		% request 
		% page, parameters, cookie
		http_request(message, message, message): message;	

		% response
		% page, result
		http_response(message, message): message;	

		% none parameter
		none : text;

		@symbolsenv

	clauses
		%DBMS (behavior)LOAFER
		db_hc_ev(M)  : inDB((sqli.?).M); 
		db_hc_ev_2(M): inDB(sqli.M);
		db_hc_ev_3(M): inDB(sqli);
		%db_hc_ev_2(M): inDB(M) :- M = (sqli.?).?; 
		%db_hc_ev_3(M): inDB(sanitized(M)); 

		%FILESYSTEM (behavior)
		fs_hc_ev(M)  : inFS(path_injection.M);
		fs_hc_ev_2(M): inFS(M) :- isInFS(M);
		%fs_hc_ev_3(F)  : inFS(sanitized(F));


entity Session(Honest, Webapplication, Database, Filesystem: agent) {

	entity Webapplication(Honest, Actor, Database, Filesystem: agent) {
		@webapp
	}


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% HONEST ENTITY
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  entity Honest(Actor, Webapplication : agent){
	
		symbols
		  Response, RResponse  : message;
			Page, Tag : text;
			Cookie : message;
			Params : message;
			Redirect : message;
			NonceH : text;
			Hhknows : message;
		
		body{
				while(true){
						select{
								% This represent the intruder that sent a link to 
								% the honest agent
								 on( i *->* Actor : ?Page.?Params.none.?Tag ):{
										NonceH := fresh();
								 		Actor *->* Webapplication : Actor.http_request(Page,Params,none).Tag.NonceH;
										%assert o : Page != public;
										%assert o: Page !=  index | Params != u.s.xss.?.s.p.s.none | !hknows->contains(?) | Tag != tag1;
										%assert o: Page !=  public | Params != p.s.xss.path_injection | !hknows->contains(?) | Tag != tag2;
										%assert o: Page !=  index | Params != u.s.xss.?.s.p.s.none | Tag != tag1;
										%assert h: exists M. hknows->contains(M) & cookieUsed(M);
								 } % end on
								 on( Webapplication *->* Actor : http_response(?Page,?Params).NonceH.Tag):{
								 %assert t : Params != xss.?;
								 		%assert o: Page !=  public | !hknows->contains(?) ;
								 		%assert g: !hknows->contains(?) ;
								 		select{
								 				%on (Params = xss.?):{
								 				%		%assert g: !hknows->contains(?) ;
								 				%		% stealing the user's knowledge
								 				%		select{on(hknows->contains(?)):{
								 				%				%Actor *->* i : hknows;
								 				%				Actor *->* i : Hhknows;
								 				%				%assert h: !cookieUsed(?) | !cookieUsed(?);
								 				%				%assert h: exists M. hknows->contains(M) & cookieUsed(M);
								 				%		}}
								 				%}
								 				 on (Params = xss.?Redirect.?):{
								 				 		% redirecting the user aka CSRF
								 				 		redirect(Redirect);
								 				 		Actor *->* Webapplication : Actor.http_request(Redirect,none,none);
								 				 		% I suppose that after this line I should put
								 				 		% the answer generated by the web application
								 				 		%Webapplication *->* Actor : http_response(?Response,?RResponse);
								 				 		hknows->add(Response);
								 				 		hknows->add(RResponse);
								 				 }
								 				%on(Params = xss):{
								 				%		NonceH := fresh();
								 				%		Actor *->* Webapplication : Actor.http_request(?,?,?).?.NonceH;
								 				%		Webapplication *->* Actor : http_response(?Response,?RResponse).NonceH.?;
								 				%		%assert g : !hknows->contains(?);
								 				%		Actor *->* i : RResponse;
								 				%		%assert g : !hknows->contains(?);
								 				%}
												%on(Params != xss.?):{
												%	Hhknows := Hhknows.Response.RResponse;
												%	%assert b:Response != test_back;
												%	hknows->add(Response);
												%	hknows->add(RResponse);
												%	%assert h: !cookieUsed(RResponse) | !cookieUsed(RResponse);
												%	%assert g: !hknows->contains(?);
												%}
								 		}
								 }
								% GENERAL HONEST RULE
								% this rule would allow the honest entity (browser?) to perform
								% any kind of request without the need of representing it
								% in the mase model (hopefuly)
								% IMPORTANT: this rule should stay here otherwise the order
								% of execution is messed
								%on(true):{
								%		% the honest agent wants to make a request
								%		NonceH := fresh();
								%	Actor *->* Webapplication : Actor.http_request(?,?,?).tag3.NonceH;
								%	% note: we might need to create one of this rule for every possibile
								%	% request that can be performed by the web application. This
								%	% fot two reasons:
								%	% 1) optimization, so to avoid --nb N when executing CL-Atse
								%	% 2) bonding request and response specifying the tag number
								%	%Webapplication *->* Actor : http_response(?Response,?RResponse).NonceH.tag3;

								%	%assert t: Response != test_back;
								%	% the following select is used for avoiding the honest
								%	% to attack himself
								%} % end on

						} %end select
				} %end while
		} % end body
 } % end entity
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% END HONEST ENTITY
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% DATABASE ENTITY
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%TODO: fix SQLquery is just one text
	
	entity Database(Webapplication, Actor, Filesystem: agent){
		symbols
			NonceWA,NonceDB,NonceFS: text;
			SQLquery, File: message;
			Sql : message;
			Set : message set;
			Value : message;
	
		body{
				while(true){
						select{ 
								on(Webapplication *->* Actor: query2(?SQLquery).?NonceWA):{
												select{
													on(inDB(SQLquery)):{
														Actor *->* Webapplication: tuple(SQLquery).NonceWA;
													}
													on((!inDB(SQLquery) & SQLquery != sanitized(?)) ):{
														Actor *->* Webapplication: no_tuple.NonceWA;
													}
												}
								}
								on(Webapplication *->* Actor : insert(?Set,?Value).?NonceWA):{
										if(inDB(Value)){
												Database *->* Webapplication : tuple(Value).NonceWA;
										}else{
												Set->add(Value);
												Database *->* Webapplication : no_tuple.NonceWA;
										}
								}
								on(Webapplication *->* Actor: query(sanitized(?SQLquery)).?NonceWA ):{
									select{on( SQLquery = tuple(?) & SQLquery != tuple(file(?)) & SQLquery != tuple(newFile(?) )):{
										Actor *->* Webapplication: no_tuple.NonceWA;
									}}
								}
								on(Webapplication *->* Actor: query(?SQLquery).?NonceWA ):{
												select{
														on(inDB(SQLquery)):{
															Actor *->* Webapplication: tuple(SQLquery).NonceWA;
														}

														%extend the database for reading from filesystem
														on(inDB(SQLquery)):{
															NonceDB := fresh();
															select{on( SQLquery = (?Sql.?File).?):{
																	Actor *->* Filesystem: readFile(File).NonceDB;
																	select{on(Filesystem *->* Actor : file(File).?NonceFS):{
																			Actor *->* Webapplication : tuple(file(File)).NonceWA;
																	}}
															}}
														}	
														%extend the database form writing to filesystem
														on(inDB(SQLquery)):{
																% when coming here, write a random file to filesystem.
																% when returning, the intruder will get to know the newly
																% created file
														
																% writing a file with a valid sql. If we assume that something is
																% inDB valid means that the pattern is validConstant.fileToWrite.remainingMessage
																NonceDB := fresh();
																select{on( SQLquery = (?Sql.?File).?):{
																		Actor *->* Filesystem: writeFile(File).NonceDB;
																		Actor *->* Webapplication : tuple(newFile(File)).NonceWA;
																	}}
														}
														
														on((!inDB(SQLquery) & SQLquery != sanitized(?)) ):{
															Actor *->* Webapplication: no_tuple.NonceWA;
														}
												}
								}%end on
			} %select
		} %while 
	} %body
  }%dbEntity
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	% FILESYSTEM ENTITY
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	entity Filesystem(Webapplication, Actor: agent){

			symbols
				Nonce1, Nonce2: text;
				Path : message;
				Entity : agent;

			body{
				while(true){
					select{
						% the webapplication asks to read the filesystem 
						on(?Entity *->* Actor : readFile(?Path).?Nonce1):{
							select{
								on( inFS(Path)):{
										Actor *->* Entity : file(Path).Nonce1;
								}
							}%select(on)
						} %on webapp -> fs
						on(?Entity *->* Actor : writeFile(?Path).?Nonce1):{
								isInFS(Path); % from this point on, inFS(Path) holds for the new path
								%% Actor *->* Webapplication : newFile(Path).Nonce2;
								% no return for now
						} %writeFile

					}%select
				}%while
			}%body
	}%fs_entity
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


	body{ %of session
		new Webapplication(honest, webapplication, database, filesystem);  
		new Database(webapplication, database, filesystem);
		new Filesystem(webapplication,filesystem);
		new Honest(honest,webapplication);
	}

	goals %of session 
		ggg:
				@goals
}

body{ %of Environment
@bodyenv
	new Session(honest,webapplication, database, filesystem);
}

}
