specification chained_bypass
channel_model CCM

entity Environment {
  
	symbols
		sqli, xss: text; 			%sql injection payload
		lfi: text; 		%valid file
		evil_file: text; 		%valid file
		webapplication, database, honest, filesystem: agent;
		nonpublic dashboard: text;
		nonpublic adminPanel: text;	
		nonpublic loginPage: text;	
		nonpublic errorPage: text;
		nonpublic viewHistory: text;
		nonpublic secureFile: text;
		option: text;
		view: text;
		upload, file,u,p, bob : text;
		nonpublic ack: text;

		%databses
		errorsql: text; %any possible SQLi payload that generates an informative error

		%DBMS
		nonpublic inDB(message): fact;
		nonpublic error(message): fact;
		nonpublic sanitizedQuery(message): message;
		nonpublic query(message): message;

		%Filesystem
		nonpublic readFile(message): message;
		nonpublic f_file(message): message;
		nonpublic new_file(message): message;
		nonpublic inFS(message): fact;
		nonpublic inFS_DB(message): fact;
		nonpublic isInFS(message): fact;
		nonpublic writeFile(message): message;

		%info about the result of a SQL query
		nonpublic tuple(message): message;
		nonpublic no_tuple: text; 

		%web application constants
		header_cookie : text;
		username : text;
		password : text;
		listselect : text;

		noninvertible hash(message) : message;

		nonceUsed(message) : fact;
		hknows : message set;

		% request 
		http_request(message): message;	
		% response
		http_response(message): message;	


		% messages tag
		nonpublic tag1,tag2,tag3,tag4 : text;
		tag11 : text;

	clauses
		%DBMS (behavior)
		db_hc_ev(M):		inDB((sqli.?).M); 
		db_hc_ev_2(M):	inDB(sqli.M); 

		%FILESYSTEM (behavior)
		fs_hc_ev(F):		inFS(lfi.F);
		fs_hc_ev_3(F):	inFS(F) :- isInFS(F);


entity Session(Webapplication, Data, Honest: agent) {

	entity Webapplication(Actor, Data,Honest: agent) {
		symbols
				Params, Response : message;
				Entity : agent;
				Nonce1, Nonce2 : message;
				tag33 : text;

		body{
		while(true){
			select{
			on(Honest *->* Actor : ?Nonce1.?Params):{
				Actor *->* Honest : Nonce1.tag1;
		 }
			on(Honest *->* Actor : ?Params):{
						Nonce1 := fresh();
						Actor *->* Data : Params.Nonce1;
						Data *->* Actor : ?Response;
						Actor *->* Honest : Response;
			}
			on(Honest *->* Actor : ?Params):{
						Nonce1 := fresh();
						Actor *->* Data : Params.Nonce1;
						Data *->* Actor : ?Response;
						Actor *->* Honest : Response;
			}
			on(Honest *->* Actor : ?Params):{
						Nonce1 := fresh();
						Actor *->* Data : Params.Nonce1;
						Data *->* Actor : ?Response;
						Actor *->* Honest : Response;
			}
			}%end select
		}%end while
		}%end body
		
	}% end entity

 entity Data(Webapplication, Actor: agent) {
		symbols
				Params, Nonce, NonceBack : message;

		body{
		while(true){
			select{ on(Webapplication *->* Actor : ?Params.?Nonce):{
				select{
					on( !nonceUsed(Nonce) & Params = sqli ): {
								nonceUsed(Nonce);
								NonceBack := fresh();
								Actor *->* Webapplication : Params.tag1.NonceBack;
					} 
					on( !nonceUsed(Nonce) & Params = sqli ): {
								nonceUsed(Nonce);
								NonceBack := fresh();
								Actor *->* Webapplication : Params.tag1.NonceBack;
					} 
						on( !nonceUsed(Nonce) & Params = sqli ):{
								nonceUsed(Nonce);
								NonceBack := fresh();
								Actor *->* Webapplication : Params.tag2.NonceBack;
						}	
						on( !nonceUsed(Nonce) & Params = sqli ):{
								nonceUsed(Nonce);
								NonceBack := fresh();
								Actor *->* Webapplication : Params.tag2.NonceBack;
						}
						on( !nonceUsed(Nonce) & Params = sqli ):{
								nonceUsed(Nonce);
								NonceBack := fresh();
								Actor *->* Webapplication : Params.tag2.NonceBack;
						}
				}
			}}%end select
		}%end while
		}%end body
		
	}% end entity

entity Honest(Webapplication, Actor: agent) {
		symbols
				Params, Nonce, NonceBack : message;
				Response, TagVal : message;
				params1 : text;

		body{
		while(true){
			select{
				on( i *->* Actor : tag11 ):{
						Nonce := fresh();
						Actor *->* Webapplication : Nonce.params1;
						Webapplication *->* Actor : Nonce.?Response;
						TagVal := Response;
				}
				on( i *->* Actor : xss):{
						Actor *->* i : TagVal;
				}
			}%end select
		}%end while
		}%end body
		
	}% end entity

	body{ %of session
		new Webapplication(webapplication,database,honest);  
		new Data(webapplication,database);
		new Honest(webapplication,honest);
	}

	goals %of session 
		authorization:
			[](!iknows(tag1)); 
			%[](!iknows(tag1) | !iknows(tag2)); 
}

body{ %of Environment
	new Session(webapplication,database, honest);
}

}
