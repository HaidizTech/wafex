specification chained_bypass
channel_model CCM

entity Environment {
  
	symbols
		sqli, xss: text; 			%sql injection payload
		lfi: text; 		%valid file
		evil_file: text; 		%valid file
		webapplication, database, honest, test, prova, ciccio: agent;
		
		%DBMS
		nonpublic inDB(text): fact;

		%Filesystem
		nonpublic inFS(text): fact;
		nonpublic isInFS(text): fact;

		nonceUsed(text) : fact;
		nonpublic hknows : text set;
		nonpublic tmp_set:  text set;

		% request 
		http_request(text): text;	
		% response
		http_response(text): text;	

		request1(text) : fact;
		request2(text) : fact;

		% texts tag
		nonpublic tag1,tag2,tag3,tag4 : text;
		nonpublic superSecret : text;
		tag11, tag22, tag33 : text;

	%clauses
		%%DBMS (behavior)
		%db_hc_ev(M):		inDB((sqli.?).M); 
		%db_hc_ev_2(M):	inDB(sqli.M); 

		%%FILESYSTEM (behavior)
		%fs_hc_ev(F):		inFS(lfi.F);
		%fs_hc_ev_3(F):	inFS(F) :- isInFS(F);


entity Session(Webapplication, Data, Honest: agent) {

	entity Webapplication(Actor, Data,Honest: agent) {
		symbols
				Params, Response : text;
				Nonce1, Nonce2, NonceH, NonceBack: text;

		body{
				while(true){
					select{
						on(Honest *->* Actor : sqli.?NonceH):{
										Nonce1 := fresh();
										Actor *->* Data : sqli.Nonce1;
										%Data *->* Actor : ?Response.Nonce1;
										%Actor *->* Honest : Response.NonceH;
										Actor *->* Honest : tag2.NonceH;
						}
						on(Honest *->* Actor : sqli.?NonceH):{
										Nonce1 := fresh();
										Actor *->* Data : sqli.Nonce1;
										%Data *->* Actor : ?Response.Nonce1;
										%Actor *->* Honest : Response.NonceH;
										Actor *->* Honest : tag1.NonceH;
						}
						on( i *->* Actor : tag1 ):{
								Actor *->* i : superSecret;
						}
						
					}%end select
				}%end while
		}%end body
		
	}% end entity

% entity Data(Webapplication, Actor: agent) {
%		symbols
%				Params, Nonce, NonceBack : text;
%		body{
%				while(true){
%						select{
%								on(Webapplication *->* Actor : sqli.?Nonce):{
%										Actor *->* Webapplication : tag1.Nonce;
%								}
%								on(Webapplication *->* Actor : sqli.?Nonce):{
%										Actor *->* Webapplication : tag2.Nonce;
%								}
%						}%end select
%				}%end while
%		}%end body
%		
%	}% end entity

entity Honest(Test, Webapplication, Actor: agent) {

		symbols
				Params, Nonce, NonceBack : text;
				Response, E : text;
				TagVal : message;

		body{
				while(true){
						select{
								on( i *->* Actor : tag11):{
										Nonce := fresh();
										Actor *->* Webapplication : ?.Nonce;
										Webapplication *->* Actor : ?Response.Nonce;
										TagVal := TagVal.Response;
										hknows->add(Response);
										request1(Response);
								}
								on(i *->* Actor : tag22):{
										Nonce := fresh();
										Actor *->* Webapplication : ?.Nonce;
										Webapplication *->* Actor : ?Response.Nonce;
										TagVal := TagVal.Response;
										hknows->add(Response);
										request2(Response);
								}
								on( i *->* Actor : xss ):{
										Actor *->* i : TagVal;
								}
								%on( i *->* Actor : xss ):{
								%		Actor *->* i : TagVal;
								%}
						}%end select
				}%end while
		}%end body
}


	body{ %of session
		new Webapplication(webapplication,database,honest);  
		%new Data(webapplication,database);
		new Honest(test,webapplication,honest);
	}

	goals %of session 
		authorization:
			%[](!iknows(tag1)); 
			%[](!iknows(hknows) | (!hknows->contains(tag1)));
			%[](!iknows(hknows) | (!hknows->contains(tag1) | !hknows->contains(tag2)));
			%[](!iknows(tag1) | !iknows(tag2));
			[](!iknows(superSecret));
			%[](!iknows(tag3));
}

body{ %of Environment
	new Session(webapplication,database, honest);
}

}
