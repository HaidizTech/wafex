% ---------------------------------------------------------------
% SQL injection in the login for writing a remote shell, exploiting 
% the remote shell for reading from the file-system
% ---------------------------------------------------------------

@symbolsenv
		%web application constants
		header_cookie : text;
		username : text;
		password : text;
		listselect : text;
		adminPanelPage, search, index : text;

		% messages tag
		tag1,tag2,tag3,tag4 : text;
		http_request2(message,message) : message;
		Search : message;
@webapp
		symbols
			Option,View,Ordering,Typeid: text;
			Username, Password, Cookie, File, RemoteShell, Path: message;
			IP: agent;
			SQLquery, SQLresponse, Search: message;
			NonceWA,NonceDB,NonceFS : text;

		body{


		while(true){
			select{
 
			on( ? *->* Actor: ?IP.http_request(search, u.s.?Search, none).tag1 ): {

							% arity problem
							SQLquery := Search;

							NonceWA := fresh();
							Actor *->* Database : query(SQLquery).NonceWA;

							select{
									on(Database *->* Actor : tuple(?SQLresponse).?NonceDB):{
										select{
											on( !nonceUsed(NonceDB)):{
												nonceUsed(NonceDB);
												Actor *->* IP : http_response(viewHistory, tuple(SQLresponse));
										}}
									}
							}
				} 

				% this branch represents an uploaded server-side code that
				% reads from the filesystem
				on( ? *->* Actor : ?IP.http_request(evil_file, file.s.?Path, none).tag2):{
					select{on( isInFS(evil_file) & evil_file != Path):{ % means the file RemoteShell has been injected and the file I'm trying to
						% retrieve is not the same as the injected file
						NonceWA := fresh();
						Actor *->* Filesystem : readFile(Path).NonceWA;
						%assert b:false;
						
						Filesystem *->* Actor : file(Path).?NonceFS;
							select{on(!nonceUsed(NonceFS)):{
								nonceUsed(NonceFS);
									Actor *->* IP : http_response(Path, file(Path));
							}}

					}}
				}


				on( ? *->* Actor: ?IP.http_request(index, p.s.?Password, none).tag3 ):{

						NonceWA := fresh();
						Actor *->* Database : query(sanitized(Password)).NonceWA;

						
						select{
							on(Database *->* Actor : tuple(?).?NonceDB):{
							%assert g: false;
							select{
								on(!nonceUsed(NonceDB)):{
								nonceUsed(NonceDB);
								Actor *->* IP: http_response(dashboard, none); % add a value that check if an http_response is valid?
								IP *->* Actor : i.http_request(index, u.bob, none).tag4;
								
								Actor *->* IP: http_response(adminPanelPage, none); % add a value that check if an http_response is valid?
							}
							}}
						}}

			}%end select
		}%end while
		}%end body

@goals
			[](!(iknows(file(adminPanelPage)))); 	%data extraction + authentication bypass

@bodyenv
isInFS(adminPanelPage);
