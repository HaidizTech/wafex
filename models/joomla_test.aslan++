% ---------------------------------------------------------------
% Joomla! SQL injection for extracting cookies and performing a
% session hijacking
% ---------------------------------------------------------------

@symbolsenv
		%web application constants
		cookie : text;
		username : text;
		password : text;
		listselect : text;
		header(message): message;
		index, list, c : text;

		http_request2(message,message,message) : message;
		http_response2(message,message) : message;




		noninvertible hash(message) : message;

		% messages tag
		tag1,tag2,tag3,tag4 : text;


@webapp
		symbols
			Option,View,Ordering,Typeid: text;
			Username, Password, Cookie, File, RemoteShell, Path: message;
			IP: agent;
			SQLquery, SQLresponse, Search: message;
			NonceWA,NonceDB,NonceFS : text;

		body{

		while(true){
			select{


			on( ? *->* Actor: ?IP.http_request(index,list.s.?Search,none).tag1 ): {
							% arity problem
							SQLquery := Search;

							NonceWA := fresh();
							Actor *->* Database : query(SQLquery).NonceWA;

							select{
									on(Database *->* Actor : tuple(?SQLresponse).?NonceDB):{
										select{
											on( !nonceUsed(NonceDB)):{
												nonceUsed(NonceDB);
												Actor *->* IP : http_response(viewHistory,tuple(SQLresponse));
										}}
									}
							}
				}

				% on( ? *->* Actor: ?IP.http_request(index,u.tuple(?).p.?Password, none).tag2 ):{
				% 		NonceWA := fresh();
				% 		Actor *->* Database : query(sanitized(hash(Password))).NonceWA;

				% 		select{
				% 			on(Database *->* Actor : no_tuple.?NonceDB):{
				% 			select{
				% 				on(!nonceUsed(NonceDB)):{
				% 				nonceUsed(NonceDB);
				% 				Actor *->* IP: http_response(dashboard,none); % add a value that check if an http_response is valid?
				% 			}
				% 			}}
				% 		}}

				on( ? *->* Actor: ?IP.http_request(index,none,cookie.s.?Cookie).tag3 ):{
						NonceWA := fresh();
						SQLquery := sanitized(Cookie);
						Actor *->* Database : query(SQLquery).NonceWA;
						%assert g: Cookie != tuple(?);

						select{
							on(Database *->* Actor : no_tuple.?NonceDB):{
							select{
								on(!nonceUsed(NonceDB)):{
								nonceUsed(NonceDB);
								Actor *->* IP: http_response(dashboard,none); % add a value that check if an http_response is valid?
							}
							}}
						}}



			}%end select
		}%end while
		}%end body

@goals
			%[](!(iknows(tuple(?)))); 																							%data extraction + authentication bypass
			[](!(iknows(dashboard))); 																							%data extraction + authentication bypass
			%[](!(iknows(f_file(?)))); 																									% filesystem access
			%[](!(isInFS(evil_file))); 																									% filesystem access
			%[]( forall M1. exists M2.!iknows(M1) & M1 = tuple(M2) &  M2 != f_file(?)); % database access
			%[](( forall M1. ( iknows(tuple(M1)) => M1 = f_file(?)))); 									% database access

			%[](( forall M1. M1 != f_file(?) => !(iknows(tuple(M1)) ))); 								% database access
			%[](!( forall M1 M2. (iknows(M1) & M1 = tuple(M2)) => M2 = f_file(?) ) ); 	% database access
@bodyend
